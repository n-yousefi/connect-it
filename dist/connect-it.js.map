{"version":3,"file":"connect-it.js","sources":["../src/components/svg/Defs.js","../src/utils/Dom.js","../src/utils/Calc.js","../src/components/VDOM.js","../src/components/edge/marker/Circle.js","../src/components/edge/Edge.js","../src/components/edge/D.js","../src/components/edge/Path.js","../src/components/edge/ShadowPath.js","../src/ConnectTo.js","../src/components/svg/Svg.js","../src/components/edge/marker/Marker.js","../src/components/edge/marker/Triangle.js","../src/components/edge/marker/Square.js"],"sourcesContent":["const Defs = () => {\r\n  return `<defs></defs>`;\r\n};\r\n\r\nexport default Defs;\r\n","export const resetGraphics = function (connectIt) {\r\n  const main = getGmain(connectIt);\r\n  const shadows = getGshadow(connectIt);\r\n  main.innerHTML = \"\";\r\n  shadows.innerHTML = \"\";\r\n  return { main, shadows };\r\n};\r\n\r\nexport const getNodes = (connectIt) => {\r\n  return connectIt.querySelectorAll(\".node\");\r\n};\r\n\r\nexport const getAdjacent = (connectIt, edge) => {\r\n  return getById(connectIt, getAttr(edge, \"to\"));\r\n};\r\n\r\nexport const getMarkers = (connectIt) => {\r\n  return connectIt.querySelectorAll(\"marker\");\r\n};\r\n\r\nexport const getEdgeMarker = (edge) => {\r\n  return edge.querySelector(\"marker\");\r\n};\r\n\r\nexport const getEdges = function (connectIt) {\r\n  return [...connectIt.querySelectorAll(\"edge\")];\r\n};\r\n\r\nexport const getNodeEdges = function (connectIt, originDiv) {\r\n  return getEdges(connectIt).filter(\r\n    (e) => getAttr(e, \"from\") == getAttr(originDiv, \"id\")\r\n  );\r\n};\r\n\r\nexport const getGmain = function (connectIt) {\r\n  return connectIt.querySelector(\"svg > g.gmain\");\r\n};\r\n\r\nexport const getGshadow = function (connectIt) {\r\n  return connectIt.querySelector(\"svg > g.gshadow\");\r\n};\r\n\r\nexport const getById = function (connectIt, id) {\r\n  return connectIt.querySelector(\"#\" + id);\r\n};\r\n\r\nexport const getAttr = function (tag, attr) {\r\n  return tag?.attributes[attr]?.value;\r\n};\r\n\r\nexport const getPathes = (connectIt) => {\r\n  return connectIt.querySelectorAll(\"path\");\r\n};\r\n\r\nexport const getImages = (connectIt) => {\r\n  return connectIt.querySelectorAll(\"img\");\r\n};\r\n\r\nexport const getRelatedPath = function (connectIt, shadowPath) {\r\n  const element = indexOf(shadowPath.parentElement.childNodes, shadowPath);\r\n  return connectIt.querySelector(`.gmain path:nth-child(${element + 1})`);\r\n};\r\n\r\nexport const indexOf = function (arr, item) {\r\n  return Array.prototype.indexOf.call(arr, item);\r\n};\r\n\r\nexport const addSelectedPathStyles = function (path) {\r\n  path.style[\"stroke-dasharray\"] = 5.5;\r\n};\r\n\r\nexport const removeSelectedPathStyles = function (path) {\r\n  path.style[\"stroke-dasharray\"] = 0;\r\n};\r\n","const getCenter = function (div) {\r\n  return {\r\n    x: div.offsetLeft + div.offsetWidth / 2,\r\n    y: div.offsetTop + div.offsetHeight / 2,\r\n  };\r\n};\r\n\r\nconst getColidPoint = function (edge, destinationLines) {\r\n  let result;\r\n  for (const [key, line] of Object.entries(destinationLines)) {\r\n    if (!result) {\r\n      const collisionPoint = checkLineCollision(edge, line);\r\n      if (collisionPoint) {\r\n        result = collisionPoint;\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nconst gettagLinesLines = function (div) {\r\n  var result = new Object();\r\n  result.left = {\r\n    x1: div.offsetLeft,\r\n    y1: div.offsetTop,\r\n    x2: div.offsetLeft,\r\n    y2: div.offsetTop + div.offsetHeight,\r\n  };\r\n  result.top = {\r\n    x1: div.offsetLeft,\r\n    y1: div.offsetTop,\r\n    x2: div.offsetLeft + div.offsetWidth,\r\n    y2: div.offsetTop,\r\n  };\r\n  result.bottom = {\r\n    x1: div.offsetLeft,\r\n    y1: div.offsetTop + div.offsetHeight,\r\n    x2: div.offsetLeft + div.offsetWidth,\r\n    y2: div.offsetTop + div.offsetHeight,\r\n  };\r\n  result.right = {\r\n    x1: div.offsetLeft + div.offsetWidth,\r\n    y1: div.offsetTop,\r\n    x2: div.offsetLeft + div.offsetWidth,\r\n    y2: div.offsetTop + div.offsetHeight,\r\n  };\r\n  return result;\r\n};\r\nconst checkLineCollision = function (line1, line2) {\r\n  var uA =\r\n    ((line2.x2 - line2.x1) * (line1.y1 - line2.y1) -\r\n      (line2.y2 - line2.y1) * (line1.x1 - line2.x1)) /\r\n    ((line2.y2 - line2.y1) * (line1.x2 - line1.x1) -\r\n      (line2.x2 - line2.x1) * (line1.y2 - line1.y1));\r\n  var uB =\r\n    ((line1.x2 - line1.x1) * (line1.y1 - line2.y1) -\r\n      (line1.y2 - line1.y1) * (line1.x1 - line2.x1)) /\r\n    ((line2.y2 - line2.y1) * (line1.x2 - line1.x1) -\r\n      (line2.x2 - line2.x1) * (line1.y2 - line1.y1));\r\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\r\n    var intersection = {\r\n      x: line1.x1 + uA * (line1.x2 - line1.x1),\r\n      y: line1.y1 + uA * (line1.y2 - line1.y1),\r\n    };\r\n    return intersection;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst getUniqueId = function () {\r\n  return new Date().getTime();\r\n};\r\n\r\nconst getLine = (from, to) => {\r\n  return {\r\n    x1: from.x,\r\n    y1: from.y,\r\n    x2: to.x,\r\n    y2: to.y,\r\n  };\r\n};\r\n\r\nconst getEdgeLine = (nodeShape, adjacentShape) => {\r\n  const centerToCenterLine = getLine(nodeShape.center, adjacentShape.center);\r\n  const from = getColidPoint(centerToCenterLine, nodeShape.tagLines);\r\n  const to = getColidPoint(centerToCenterLine, adjacentShape.tagLines);\r\n  return getLine(from, to);\r\n};\r\n\r\nconst getNodeShape = (node) => {\r\n  const center = getCenter(node);\r\n  const tagLines = gettagLinesLines(node);\r\n  return {\r\n    center: center,\r\n    tagLines: tagLines,\r\n  };\r\n};\r\n\r\nexport default {\r\n  getEdgeLine,\r\n  getNodeShape,\r\n};\r\n","import Calc from \"../utils/Calc\";\r\n\r\nexport class VDOM {\r\n  constructor(element) {\r\n    this.nodes = this.parseNodes(element);\r\n    this.shapes = this.parseAll(element, \"shapes shape\");\r\n    const edges = this.parseAll(element, \"edges edge\");\r\n    this.setShapeIds();\r\n    this.setNodesAdjecentsAndProps(edges);\r\n    this.links = this.getLinks();\r\n  }\r\n\r\n  setNodesAdjecentsAndProps(edges) {\r\n    edges.forEach((edge) => {\r\n      const from = this.getById(this.nodes, edge.from);\r\n      const to = this.getById(this.nodes, edge.to);\r\n      if (\r\n        to &&\r\n        from &&\r\n        (to.center.x !== from.center.x || to.center.y !== from.center.y)\r\n      ) {\r\n        from.adjacents.push({\r\n          to,\r\n          ...this.getMarkers(edge),\r\n          color: edge.color,\r\n          size: edge.size,\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  getLinks() {\r\n    const edges = [];\r\n    this.nodes.forEach((node, i) => {\r\n      node.adjacents.forEach((adjacent) => {\r\n        const line = Calc.getEdgeLine(node, adjacent.to);\r\n        edges.push({\r\n          line,\r\n          markerStart: adjacent.markerStart?.id + \"Start\",\r\n          markerEnd: adjacent.markerEnd?.id + \"End\",\r\n          color: adjacent.color,\r\n          size: adjacent.size,\r\n        });\r\n      });\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  parseAll(element, query) {\r\n    return [...element.querySelectorAll(query)].map(this.parseTag);\r\n  }\r\n\r\n  getById(tags, id) {\r\n    return tags.filter((tag) => tag.id == id)[0];\r\n  }\r\n\r\n  getByName(tags, name) {\r\n    return tags.filter((tag) => tag.name == name)[0];\r\n  }\r\n\r\n  getMarkers(edge) {\r\n    return {\r\n      markerStart: this.getByName(this.shapes, edge[\"marker-start\"]),\r\n      markerEnd: this.getByName(this.shapes, edge[\"marker-end\"]),\r\n    };\r\n  }\r\n\r\n  setShapeIds() {\r\n    this.shapes.forEach((shape) => (shape.id = shape.name));\r\n  }\r\n\r\n  parseNodes(element) {\r\n    const nodes = [];\r\n    element.querySelectorAll(\"nodes *[id]\").forEach((node, i) => {\r\n      const shape = Calc.getNodeShape(node);\r\n      nodes.push({\r\n        id: node.attributes[\"id\"]?.value,\r\n        ...shape,\r\n        adjacents: [],\r\n      });\r\n    });\r\n    return nodes;\r\n  }\r\n\r\n  parseTag = (tag) => {\r\n    const result = {\r\n      name: tag.tagName,\r\n      ...this.getAttributes(tag),\r\n    };\r\n    if (tag.children.length > 0)\r\n      result.children = [...tag.children].map(this.parseTag);\r\n    return result;\r\n  };\r\n\r\n  getAttributes(tag) {\r\n    const result = [];\r\n    [...tag.attributes].map((attr) => {\r\n      result[attr.name] = attr.value;\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","const Circle = (shape) => {\r\n  const size = shape.size ?? 6;\r\n  const center = size / 2;\r\n  const color = shape.color ?? \"black\";\r\n\r\n  return `<marker id=\"${\r\n    shape.id\r\n  }Start\" orient=\"auto\" refY=\"${center}\" refX=\"${0}\" markerHeight=\"${size}\" markerWidth=\"${size}\" viewBox=\"0 0 ${size} ${size}\">\r\n    <circle cx=${center} cy=${center} r=${center}  fill=\"${color}\"></circle>\r\n  </marker>\r\n  <marker id=\"${\r\n    shape.id\r\n  }End\" orient=\"auto\" refY=\"${center}\" refX=\"${size}\" markerHeight=\"${size}\" markerWidth=\"${size}\" viewBox=\"0 0 ${size} ${size}\">\r\n      <circle cx=${center} cy=${center} r=${center}  fill=\"${color}\"></circle>\r\n  </marker>`;\r\n};\r\nexport default Circle;\r\n","import D from \"./D\";\r\nimport ShadowPath from \"./ShadowPath\";\r\nimport Path from \"./Path\";\r\nimport * as Dom from \"../../utils/Dom\";\r\n\r\nconst refreshEdges = function (connectIt) {\r\n  const graphics = Dom.resetGraphics(connectIt);\r\n  connectIt.vdom.links.forEach((edge, i) => {\r\n    DrawEdge(graphics, edge);\r\n  });\r\n};\r\n\r\nconst DrawEdge = (graphics, edge) => {\r\n  const d = D(edge.line);\r\n  graphics.main.innerHTML += Path(d, edge);\r\n  graphics.shadows.innerHTML += ShadowPath(d);\r\n};\r\n\r\nexport default refreshEdges;\r\n","const D = (line) => {\r\n  return `M${line.x1},${line.y1} L${line.x2},${line.y2} `;\r\n};\r\nexport default D;\r\n","const Path = (d, edge) => {\r\n  return `<path d=\"${d}\" \r\n    stroke=\"${edge.color}\" \r\n    stroke-width=\"${edge.size ?? 2}\" \r\n    marker-start=\"url(#${edge.markerStart})\"\r\n    marker-end=\"url(#${edge.markerEnd})\"\r\n    \"/>`;\r\n};\r\n\r\nexport default Path;\r\n","const ShadowPath = (d) => {\r\n  return `<path stroke=\"transparent\" stroke-width=\"12\" d=\"${d}\"/>`;\r\n};\r\n\r\nexport default ShadowPath;\r\n","import addSvg from \"./components/svg/Svg\";\r\nimport addMouseEvents from \"./utils/Events\";\r\nimport { VDOM } from \"./components/VDOM\";\r\nimport refreshMarkers from \"./components/edge/marker/Marker\";\r\nimport refreshEdges from \"./components/edge/Edge\";\r\n\r\nclass ConnectTo extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    const connectTo = this;\r\n    addSvg(this);\r\n    this.onLoad(() => {\r\n      connectTo.refresh();\r\n    });\r\n    this.observe(function (mutation) {\r\n      if (mutation.target.parent == this && !mutation.target.closest(\"nodes\"))\r\n        return;\r\n      connectTo.refresh();\r\n    });\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  observe = (handler) => {\r\n    this.observer = new MutationObserver(function (mutations) {\r\n      mutations.forEach(handler);\r\n    });\r\n\r\n    this.observer.observe(document, {\r\n      attributes: true,\r\n      childList: true,\r\n      subtree: true,\r\n    });\r\n  };\r\n\r\n  refresh = () => {\r\n    const vdom = new VDOM(this);\r\n    if (JSON.stringify(vdom) !== JSON.stringify(this.vdom)) {\r\n      this.vdom = vdom;\r\n      //addMouseEvents(this);\r\n      refreshMarkers(this);\r\n      refreshEdges(this);\r\n      this.resizeSVG();\r\n    }\r\n  };\r\n\r\n  resizeSVG = () => {\r\n    var svg = this.querySelector(\"svg\");\r\n    var bbox = svg.getBBox();\r\n    svg.setAttribute(\"width\", bbox.x + bbox.width + bbox.x);\r\n    svg.setAttribute(\"height\", bbox.y + bbox.height + bbox.y);\r\n  };\r\n\r\n  onLoad = (func) => {\r\n    Promise.all(\r\n      Array.from(this.querySelectorAll(\"img\"))\r\n        .filter((img) => !img.complete)\r\n        .map(\r\n          (img) =>\r\n            new Promise((resolve) => {\r\n              img.onload = img.onerror = resolve;\r\n            })\r\n        )\r\n    ).then(() => {\r\n      func();\r\n    });\r\n  };\r\n}\r\n\r\ncustomElements.get(\"connect-it\") ||\r\n  customElements.define(\"connect-it\", ConnectTo);\r\n","import Defs from \"./Defs\";\r\nimport Gmain from \"./Gmain\";\r\nimport Gshadow from \"./Gshadow\";\r\n\r\nconst addSvg = (connectIt) => {\r\n  const html = `<svg style=\"position: absolute; top: 0; left: 0;  z-index:-1\">\r\n    ${Defs() + Gmain() + Gshadow()}\r\n    </svg>`;\r\n\r\n  connectIt.insertAdjacentHTML(\"afterbegin\", html);\r\n  connectIt.defs = connectIt.querySelector(\"defs\");\r\n};\r\n\r\nexport default addSvg;\r\n","import Circle from \"./Circle\";\r\nimport Square from \"./Square\";\r\nimport Triangle from \"./Triangle\";\r\n\r\nconst refreshMarkers = (connectIt) => {\r\n  connectIt.defs.innerHTML = \"\";\r\n  connectIt.vdom.shapes.forEach((shape) => {\r\n    let markerHtml = \"\";\r\n    switch (shape.type) {\r\n      case \"triangle\":\r\n        markerHtml = Triangle(shape);\r\n        break;\r\n      case \"circle\":\r\n        markerHtml = Circle(shape);\r\n        break;\r\n      case \"square\":\r\n        markerHtml = Square(shape);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    connectIt.defs.insertAdjacentHTML(\"beforeend\", markerHtml);\r\n  });\r\n};\r\n\r\nexport default refreshMarkers;\r\n","const Triangle = function (shape) {\r\n  const size = shape.size ?? 6;\r\n  const center = size / 2;\r\n  const color = shape.color ?? \"black\";\r\n  return `<marker id=\"${\r\n    shape.id\r\n  }Start\" orient=\"auto\" refY=\"${center}\" refX=\"${0}\" \r\n    markerHeight=\"${size}\" markerWidth=\"${size}\" viewBox=\"0 0 ${size} ${size}\">\r\n        <polygon points=\"0,0 0,${size} ${center},${center}\" fill=\"${color}\"></polygon>\r\n  </marker>\r\n  <marker id=\"${shape.id}End\" orient=\"auto\" refY=\"${center}\" refX=\"${center}\" \r\n    markerHeight=\"${size}\" markerWidth=\"${size}\" viewBox=\"0 0 ${size} ${size}\">\r\n        <polygon points=\"0,0 0,${size} ${center},${center}\" fill=\"${color}\"></polygon>\r\n  </marker>`;\r\n};\r\n\r\nexport default Triangle;\r\n","const Square = (shape) => {\r\n  const size = shape.size ?? 6;\r\n  const center = size / 2;\r\n  const color = shape.color ?? \"black\";\r\n\r\n  return `<marker id=\"${shape.id}Start\" orient=\"auto\" refY=\"${\r\n    center / 2\r\n  }\" refX=\"${0}\" markerHeight=\"${size}\" markerWidth=\"${size}\" viewBox=\"0 0 ${size} ${size}\">\r\n    <rect x=\"0\" y=\"0\" width=${center} height=${center}  fill=\"${color}\"/>\r\n  </marker>\r\n  <marker id=\"${shape.id}End\" orient=\"auto\" refY=\"${\r\n    center / 2\r\n  }\" refX=\"${center}\" markerHeight=\"${size}\" markerWidth=\"${size}\" viewBox=\"0 0 ${size} ${size}\">\r\n    <rect x=\"0\" y=\"0\" width=${center} height=${center}  fill=\"${color}\"/>\r\n  </marker>`;\r\n};\r\nexport default Square;\r\n"],"names":["getGmain","connectIt","querySelector","getGshadow","getColidPoint","edge","destinationLines","result","key","line","Object","entries","collisionPoint","checkLineCollision","line1","line2","uA","x2","x1","y1","y2","uB","x","y","getLine","from","to","Calc","nodeShape","adjacentShape","centerToCenterLine","center","tagLines","node","div","offsetLeft","offsetWidth","offsetTop","offsetHeight","left","top","bottom","right","gettagLinesLines","VDOM","constructor","element","this","nodes","parseNodes","shapes","parseAll","edges","setShapeIds","setNodesAdjecentsAndProps","links","getLinks","forEach","getById","adjacents","push","getMarkers","color","size","i","adjacent","markerStart","id","markerEnd","query","querySelectorAll","map","parseTag","tags","filter","tag","getByName","name","shape","attributes","value","tagName","getAttributes","children","length","attr","DrawEdge","graphics","d","main","innerHTML","Path","shadows","ShadowPath","ConnectTo","HTMLElement","super","connectedCallback","connectTo","insertAdjacentHTML","defs","onLoad","refresh","observe","mutation","target","parent","closest","disconnectedCallback","observer","disconnect","handler","MutationObserver","mutations","document","childList","subtree","vdom","JSON","stringify","markerHtml","type","Triangle","Circle","Square","Dom.resetGraphics","refreshEdges","resizeSVG","svg","bbox","getBBox","setAttribute","width","height","func","Promise","all","Array","img","complete","resolve","onload","onerror","then","customElements","get","define"],"mappings":"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"}